# application.yml 파일

# 기본 서버 포트 설정 (프로파일 별로 동일하게 사용 가능)
server:
  port: 8080

# docker 프로파일에 해당하는 설정
spring:
  config:
    activate:
      on-profile: docker
    # .env 파일을 불러와서 환경변수로 설정된 값을 적용합니다.
    import: optional:file:./.env
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  web:
    resources:
      mime:
        types:
          map: application/json
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          time_zone: Asia/Seoul
    defer-datasource-initialization: true
  datasource:
    # DB URL은 docker 환경에 맞게 지정
    url: ${DB_URL_DOCKER}
    # username과 password를 .env 파일에서 주입받습니다.
    username: ${DB_USERNAME}       # 예: ppproject
    password: ${DB_PASSWORD}       # 예: ppproject
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: true
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 30000
      max-lifetime: 1800000
      connection-timeout: 30000
  security:
    oauth2:
      client:
        registration:
          google:
            # OAuth2 클라이언트 ID와 secret은 외부 환경변수로 분리 (이미 이렇게 사용 중)
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${SERVER_URL}/login/oauth2/code/{registrationId}
            scope:
              - name
              - email
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${SERVER_URL}/login/oauth2/code/{registrationId}
            scope:
              - nickname
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
---

# local 프로파일에 해당하는 설정
spring:
  output:
    ansi:
      enabled: ALWAYS
  config:
    activate:
      on-profile: local
    import: optional:file:./.env  # .env 파일을 불러옵니다.
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  web:
    resources:
      mime:
        types:
          map: application/json
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          time_zone: Asia/Seoul
    defer-datasource-initialization: true
  datasource:
    # local 환경에 맞는 DB URL 설정
    url: ${DB_URL_LOCAL}
    # local 프로파일에서도 DB 사용자 정보는 환경 변수로 관리합니다.
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: true
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 30000
      max-lifetime: 1800000
      connection-timeout: 30000
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            # local 환경에서는 scope 값을 쉼표로 구분하여 작성 가능
            scope: email, profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${SERVER_URL}/login/oauth2/code/naver
            scope:
              - email
              - name
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${SERVER_URL}/login/oauth2/code/kakao
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
# JWT 시크릿 값도 외부 환경 변수에서 불러옵니다.
jwt:
  secret: ${JWT_SECRET}
